        -:    0:Source:code.cc
        -:    0:Graph:code.gcno
        -:    0:Data:code.gcda
        -:    0:Runs:1
        -:    1:#include <iostream>
        -:    2:#include <fstream>
        -:    3:#include <time.h>
        -:    4:#include <cassert>
        -:    5:#include <sstream>
        -:    6:using namespace std;
        -:    7:
        -:    8:class Date {
        -:    9:  public:
        -:   10:    Date();
        -:   11:    // Default copy ctor is fine
        -:   12:    // Default assignment operator is fine
        -:   13:    Date(int year, int month, int day);
        -:   14:
        -:   15:    int getday() const;
        -:   16:    int getmonth() const;
        -:   17:    int getyear() const;
        -:   18:
        -:   19:    void setday(int);
        -:   20:    void setmonth(int);
        -:   21:    void setyear(int);
        -:   22:
        -:   23:    Date &operator+=(int);
        -:   24:    int operator-(const Date &) const;
        -:   25:
        -:   26:    Date operator+(int) const;
        -:   27:    const Date &operator++();	// prefix
        -:   28:    Date operator++(int);		// postfix
        -:   29:
        -:   30:    Date operator-(int) const;
        -:   31:    Date &operator-=(int);
        -:   32:    const Date &operator--();	// prefix
        -:   33:    Date operator--(int);		// postfix
        -:   34:
        -:   35:    bool operator<(const Date &) const;
        -:   36:    bool operator<=(const Date &) const;
        -:   37:    bool operator>(const Date &) const;
        -:   38:    bool operator>=(const Date &) const;
        -:   39:    bool operator==(const Date &) const;
        -:   40:    bool operator!=(const Date &) const;
        -:   41:
        -:   42:  protected:
        -:   43:    static int ymd_to_daynum(int year, int month, int day);
        -:   44:    int daynum;				// 1 = January 1, year 1
        -:   45:};
        -:   46:
        -:   47:Date operator+(int, const Date &);
        -:   48:ostream &operator<<(ostream &out, const Date &);	// YYYY-MM-DD
        -:   49:istream &operator>>(istream &in, Date &);		// YYYY-MM-DD
        -:   50:
        -:   51:// Return true if year is a leap year, false if it isn’t.
        -:   52://
        -:   53:// The rules are:
        -:   54:// • Years divisible by 4 are leap years, except
        -:   55:// • years divisible by 100 are NOT leap years, except
        -:   56:// • years divisible by 400 ARE leap years.
        -:   57://
        -:   58:// Examples:
        -:   59:// • Leap years: 1600, 2000, 2004, 2008, 2400
        -:   60:// • Not leap years: 1700, 1800, 1900, 2001, 2002, 2003
        -:   61:
function _ZL4leapi called 328410 returned 100% blocks executed 100%
   328410:   62:static bool leap(int year) {
        -:   63:    assert(1 <= year && year <= 9999);
        -:   64:    // if (year % 400 == 0)			// Divisible by 400?
        -:   65:	//     return true;				// It’s a leap year.
        -:   66:    // if (year % 100 == 0)			// Divisible by 100?
        -:   67:	//     return false;				// Not a leap year.
        -:   68:    // if (year % 4 == 0)				// Divisible by 4?
        -:   69:    // 	return true;				// It’s a leap year.
        -:   70:    // return false;				// Boring old ordinary year.
        -:   71:
        -:   72:    // could use a bitwise AND operator
        -:   73:    // like this ((year & 3) == 0 && ((year % 25) != 0 || (year & 15) == 0))
        -:   74:    // if the compiler have no optimization
        -:   75:    // but the compiler has optimized so it make no difference whatsoever
        -:   76:    // beside, using the modulo is more clearer.
        -:   77:    // and now we only do check once instead of three times.
   328410:   78:    return (year % 400 == 0) || (( year % 100 != 0) && (year % 4 == 0 ));
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
branch  4 taken 24% (fallthrough)
branch  5 taken 76%
        -:   79:}
        -:   80:
function _ZL13days_per_yeari called 323314 returned 100% blocks executed 100%
   323314:   81:static int days_per_year(int year) {
        -:   82:    assert(1 <= year && year <= 9999);
   323314:   83:    return leap(year) ? 366 : 365;
call    0 returned 100%
branch  1 taken 24% (fallthrough)
branch  2 taken 76%
        -:   84:}
        -:   85:
function _ZL14days_per_monthii called 30160 returned 100% blocks executed 100%
    30160:   86:static int days_per_month(int year, int month) {
        -:   87:    assert(1 <= year && year <= 9999);
        -:   88:    assert(1 <= month && month <= 12);
    30160:   89:    const int days[] = {00,31,28,31,30,31,30,31,31,30,31,30,31};
    30160:   90:    if (month==2 && leap(year))
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
call    2 returned 100%
branch  3 taken 1% (fallthrough)
branch  4 taken 100%
branch  5 taken 1% (fallthrough)
branch  6 taken 100%
        2:   91:	return 29;
    30158:   92:    return days[month];
        -:   93:}
        -:   94:
function _ZN4Date13ymd_to_daynumEiii called 56 returned 100% blocks executed 100%
       56:   95:int Date::ymd_to_daynum(int year, int month, int day) {
        -:   96:    assert(1 <= year && year <= 9999);
        -:   97:    assert(1 <= month && month <= 12);
        -:   98:    assert(1 <= day && day <= 31);
        -:   99:
        -:  100:    // Start at Jan 1, 0001, and increment until we get to what we want
       56:  101:    int daynum=1;
        -:  102:
    64335:  103:    for (int y=1; y < year; y++)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
    64279:  104:	daynum += days_per_year(y);
call    0 returned 100%
        -:  105:
      349:  106:    for (int m=1; m < month; m++)
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
      293:  107:	daynum += days_per_month(year, m);
call    0 returned 100%
        -:  108:
        -:  109:    // We're now poised at the first day of that month
       56:  110:    daynum += day-1;
        -:  111:
        -:  112:    assert(1 <= daynum && daynum <= 10000 * 366);
       56:  113:    return daynum;
        -:  114:}
        -:  115:
function _ZL13daynum_to_ymdiRiS_S_ called 201 returned 100% blocks executed 91%
      201:  116:static void daynum_to_ymd(int daynum, int &year, int &month, int &day) {
        -:  117:    assert(1 <= daynum && daynum <= 10000 * 366);
        -:  118:
      201:  119:    int y=1, m=1, d=1;
        -:  120:
        -:  121:#if 1
        -:  122:    // Jump forward by years, at first.  This reduces the iterations,
        -:  123:    // for modern dates, from ~733k to ~2181.
   259236:  124:    while (daynum >= 366)
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
   259035:  125:	daynum -= days_per_year(y++);
call    0 returned 100%
        -:  126:#endif
        -:  127:
    30068:  128:    for (; daynum>1; daynum--) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:  129:	// Increment y-m-d
    29867:  130:	d++;
    29867:  131:	if (d > days_per_month(y, m)) {
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
      903:  132:	    m++;
      903:  133:	    d=1;
      903:  134:	    if (m > 12) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  135:		y++;
    #####:  136:		m=1;
        -:  137:	    }
        -:  138:	}
        -:  139:    }
        -:  140:
      201:  141:    year = y;
      201:  142:    month = m;
      201:  143:    day = d;
        -:  144:
        -:  145:    assert(1 <= year && year <= 9999);
        -:  146:    assert(1 <= month && month <= 12);
        -:  147:    assert(1 <= day && day <= 31);
      201:  148:}
        -:  149:
function _ZN4DateC2Eiii called 51 returned 100% blocks executed 100%
       51:  150:Date::Date(int year, int month, int day)
       51:  151:: daynum(ymd_to_daynum(year, month, day)) {
call    0 returned 100%
        -:  152:    assert(1 <= year && year <= 9999);
        -:  153:    assert(1 <= month && month <= 12);
        -:  154:    assert(1 <= day && day <= 31);
        -:  155:    assert(1 <= daynum && daynum <= 10000 * 366);
       51:  156:}
        -:  157:
function _ZN4DateC2Ev called 2 returned 100% blocks executed 100%
        2:  158:Date::Date() {
        2:  159:    const time_t now = time(nullptr);	    // Seconds since 1970 started
call    0 returned 100%
        2:  160:    struct tm *tm = localtime(&now);	    // year/month/day/hour/min/sec
call    0 returned 100%
        2:  161:    daynum = ymd_to_daynum(tm->tm_year+1900, tm->tm_mon+1, tm->tm_mday);
call    0 returned 100%
        -:  162:    // Yes, 1900.  That’s not a Y2K bug--that’s how localtime is defined.
        2:  163:}
        -:  164:
function _ZNK4Date6getdayEv called 66 returned 100% blocks executed 100%
       66:  165:int Date::getday() const {
        -:  166:    int year, month, day;
       66:  167:    daynum_to_ymd(daynum, year, month, day);
call    0 returned 100%
       66:  168:    return day;
        -:  169:}
        -:  170:
function _ZNK4Date8getmonthEv called 66 returned 100% blocks executed 100%
       66:  171:int Date::getmonth() const {
        -:  172:    int year, month, day;
       66:  173:    daynum_to_ymd(daynum, year, month, day);
call    0 returned 100%
       66:  174:    return month;
        -:  175:}
        -:  176:
function _ZNK4Date7getyearEv called 66 returned 100% blocks executed 100%
       66:  177:int Date::getyear() const {
        -:  178:    int year, month, day;
       66:  179:    daynum_to_ymd(daynum, year, month, day);
call    0 returned 100%
       66:  180:    return year;
        -:  181:}
        -:  182:
function _ZN4Date6setdayEi called 1 returned 100% blocks executed 100%
        1:  183:void Date::setday(int new_day) {
        -:  184:    int year, month, day;
        1:  185:    daynum_to_ymd(daynum, year, month, day);
call    0 returned 100%
        1:  186:    daynum = ymd_to_daynum(year, month, new_day);
call    0 returned 100%
        1:  187:}
        -:  188:
function _ZN4Date8setmonthEi called 1 returned 100% blocks executed 100%
        1:  189:void Date::setmonth(int new_month) {
        -:  190:    int year, month, day;
        1:  191:    daynum_to_ymd(daynum, year, month, day);
call    0 returned 100%
        1:  192:    daynum = ymd_to_daynum(year, new_month, day);
call    0 returned 100%
        1:  193:}
        -:  194:
function _ZN4Date7setyearEi called 1 returned 100% blocks executed 100%
        1:  195:void Date::setyear(int new_year) {
        -:  196:    int year, month, day;
        1:  197:    daynum_to_ymd(daynum, year, month, day);
call    0 returned 100%
        1:  198:    daynum = ymd_to_daynum(new_year, month, day);
call    0 returned 100%
        1:  199:}
        -:  200:
        -:  201:// This one stands alone
        -:  202:
function _ZNK4DatemiERKS_ called 2 returned 100% blocks executed 100%
        2:  203:int Date::operator-(const Date &rhs) const {
        2:  204:    return daynum - rhs.daynum;
        -:  205:}
        -:  206:
        -:  207:// This does the real work of all numeric operations.
        -:  208:// All other operators (+, -, ++, -=, etc) should invoke operator+=.
        -:  209:
function _ZN4DatepLEi called 10 returned 100% blocks executed 100%
       10:  210:Date &Date::operator+=(int value) {
       10:  211:    daynum += value;
       10:  212:    return *this;
        -:  213:}
        -:  214:
function _ZNK4DateplEi called 3 returned 100% blocks executed 100%
        3:  215:Date Date::operator+(int value) const {
        3:  216:    Date result = *this;
        3:  217:    return result += value;
call    0 returned 100%
        -:  218:}
        -:  219:
function _ZN4DateppEv called 1 returned 100% blocks executed 100%
        1:  220:const Date &Date::operator++() {			// prefix
        1:  221:    *this += 1;
call    0 returned 100%
        1:  222:    return *this;
        -:  223:}
        -:  224:
function _ZN4DateppEi called 1 returned 100% blocks executed 100%
        1:  225:Date Date::operator++(int /* dummy */) {		// postfix
        1:  226:    const auto before = *this;
        1:  227:    *this += 1;
call    0 returned 100%
        1:  228:    return before;
        -:  229:}
        -:  230:
function _ZNK4DatemiEi called 1 returned 100% blocks executed 100%
        1:  231:Date Date::operator-(int value) const {
        1:  232:    return *this + -value;
call    0 returned 100%
        -:  233:}
        -:  234:
function _ZN4DatemIEi called 4 returned 100% blocks executed 100%
        4:  235:Date &Date::operator-=(int value) {
        4:  236:    return *this += -value;
call    0 returned 100%
        -:  237:}
        -:  238:
function _ZN4DatemmEv called 1 returned 100% blocks executed 100%
        1:  239:const Date &Date::operator--() {			// prefix
        1:  240:    *this -= 1;
call    0 returned 100%
        1:  241:    return *this;
        -:  242:}
        -:  243:
function _ZN4DatemmEi called 1 returned 100% blocks executed 100%
        1:  244:Date Date::operator--(int /* dummy */) {		// postfix
        1:  245:    Date before = *this;
        1:  246:    *this -= 1;
call    0 returned 100%
        1:  247:    return before;
        -:  248:}
        -:  249:
        -:  250:
function _ZNK4DateltERKS_ called 2 returned 100% blocks executed 100%
        2:  251:bool Date::operator<(const Date &rhs) const {
        2:  252:    return daynum < rhs.daynum;
        -:  253:}
        -:  254:
function _ZNK4DateleERKS_ called 3 returned 100% blocks executed 100%
        3:  255:bool Date::operator<=(const Date &rhs) const {
        3:  256:    return daynum <= rhs.daynum;
        -:  257:}
        -:  258:
function _ZNK4DategtERKS_ called 2 returned 100% blocks executed 100%
        2:  259:bool Date::operator>(const Date &rhs) const {
        2:  260:    return daynum > rhs.daynum;
        -:  261:}
        -:  262:
function _ZNK4DategeERKS_ called 3 returned 100% blocks executed 100%
        3:  263:bool Date::operator>=(const Date &rhs) const {
        3:  264:    return daynum >= rhs.daynum;
        -:  265:}
        -:  266:
function _ZNK4DateeqERKS_ called 2 returned 100% blocks executed 100%
        2:  267:bool Date::operator==(const Date &rhs) const {
        2:  268:    return daynum == rhs.daynum;
        -:  269:}
        -:  270:
function _ZNK4DateneERKS_ called 2 returned 100% blocks executed 100%
        2:  271:bool Date::operator!=(const Date &rhs) const {
        2:  272:    return daynum != rhs.daynum;
        -:  273:}
        -:  274:
function _ZpliRK4Date called 1 returned 100% blocks executed 100%
        1:  275:Date operator+(int value, const Date &rhs) {
        1:  276:    return rhs + value;
call    0 returned 100%
        -:  277:}
        -:  278:
function _ZlsRSoRK4Date called 66 returned 100% blocks executed 100%
       66:  279:ostream &operator<<(ostream &out, const Date &d) {
       66:  280:    return out << d.getyear() << '-' << d.getmonth() << '-' << d.getday();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
        -:  281:}
        -:  282:
        -:  283:#include <iomanip>
        -:  284:
function _ZrsRSiR4Date called 51 returned 100% blocks executed 100%
       51:  285:istream &operator>>(istream &in, Date &d) {
        -:  286:    int year, month, day;
        -:  287:    char c1, c2;
      100:  288:    if (in >> year  >> c1 && c1=='-'
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 98% (fallthrough)
branch 10 taken 2%
       48:  289:     && in >> month >> c2 && c2=='-'
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
      100:  290:     && in >> day)
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 94% (fallthrough)
branch 11 taken 6%
       48:  291:	d = Date(year, month, day);
call    0 returned 100%
        -:  292:    else
        3:  293:	in.setstate(ios::failbit);	// Input failed, so spoil the stream
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       51:  294:    return in;
        -:  295:}
        -:  296:
        -:  297:
function main called 1 returned 100% blocks executed 86%
        1:  298:int main() {
        -:  299:    // Read & display some dates
        1:  300:    ifstream data("data.txt");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
        1:  301:    Date d;
call    0 returned 100%
        -:  302:    // Read each line, try to convert it to a date, complain if it fails.
       52:  303:    for (string s; getline(data, s); ) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 98% (fallthrough)
branch  8 taken 2%
call    9 returned 100%
call   10 never executed
      102:  304:	istringstream iss(s);	// Initialize stream with string
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
       51:  305:	if (iss >> d)		// Try to convert to a date
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 94% (fallthrough)
branch  7 taken 6%
       48:  306:	    cout << d << '\n';
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  307:	else
        3:  308:	    cerr << "Bad date \"" << s << "\"\n";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
        -:  309:    }
        -:  310:
        1:  311:    const Date a(2009,3,4);
call    0 returned 100%
        1:  312:    cout << a << '\n';		// Wed Mar 4 2009
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  313:
        1:  314:    const Date b(a);
        1:  315:    cout << b << '\n';		// Wed Mar 4 2009
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  316:
        1:  317:    Date c; c=a;
call    0 returned 100%
        1:  318:    cout << c << '\n';		// Wed Mar 4 2009
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  319:
        1:  320:    c = c+1;
call    0 returned 100%
        1:  321:    cout << c << '\n';		// Thu Mar 5 2009
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:  322:    c += 9;
call    0 returned 100%
        1:  323:    cout << c << '\n';		// Sat Mar 14 2009
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:  324:    d = ++c;
call    0 returned 100%
        1:  325:    cout << c << '\n';		// Sun Mar 15 2009
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:  326:    cout << d << '\n';		// Sun Mar 15 2009
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  327:
        1:  328:    d = c++;
call    0 returned 100%
        1:  329:    cout << c << '\n';		// Mon Mar 16 2009
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:  330:    cout << d << '\n';		// Sun Mar 15 2009
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  331:
        1:  332:    Date e = d-1;
call    0 returned 100%
        1:  333:    cout << e << '\n';		// Sat Mar 14 2009
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:  334:    d = e--;
call    0 returned 100%
        1:  335:    cout << d << '\n';		// Sat Mar 14 2009
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:  336:    cout << e << '\n';		// Fri Mar 13 2009
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:  337:    d = --e;
call    0 returned 100%
        1:  338:    cout << d << '\n';		// Thu Mar 12 2009
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:  339:    cout << e << '\n';		// Thu Mar 12 2009
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:  340:    e -= 5;
call    0 returned 100%
        1:  341:    cout << e << '\n';		// Sat Mar 7 2009
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:  342:    e -= -2;
call    0 returned 100%
        1:  343:    cout << e << '\n';		// Mon Mar 9 2009
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:  344:    cout << d-e << '\n';	// 3
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
        1:  345:    cout << e-d << '\n';	// -3
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
        -:  346:
        -:  347:    // a==b, a<c
       1*:  348:    cout << ((a==b) ? "== good\n" : "== bad\n");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       1*:  349:    cout << ((a==c) ? "== bad\n"  : "== good\n");
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       1*:  350:    cout << ((a!=c) ? "!= good\n" : "!= bad\n");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       1*:  351:    cout << ((a!=b) ? "!= bad\n"  : "!= good\n");
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       1*:  352:    cout << ((a<c)  ? "<  good\n" : "<  bad\n");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       1*:  353:    cout << ((a<b)  ? "<  bad\n"  : "<  good\n");
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       1*:  354:    cout << ((c>a)  ? ">  good\n" : ">  bad\n");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       1*:  355:    cout << ((b>a)  ? ">  bad\n"  : ">  good\n");
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       1*:  356:    cout << ((a<=b) ? "<= good\n" : "<= bad\n");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       1*:  357:    cout << ((a<=c) ? "<= good\n" : "<= bad\n");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       1*:  358:    cout << ((c<=a) ? "<= bad\n"  : "<= good\n");
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       1*:  359:    cout << ((a>=b) ? ">= good\n" : ">= bad\n");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       1*:  360:    cout << ((c>=a) ? ">= good\n" : ">= bad\n");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       1*:  361:    cout << ((a>=c) ? ">= bad\n"  : ">= good\n");
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  362:
        -:  363:    // test for setters
        1:  364:    Date l(2009,3,4);
call    0 returned 100%
        1:  365:    l.setday(2);
call    0 returned 100%
        1:  366:    l.setmonth(3);
call    0 returned 100%
        1:  367:    l.setyear(2010);
call    0 returned 100%
        1:  368:    cout << l << '\n';
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  369:
        -:  370:    // test for global operator+
        1:  371:    Date k(2009, 2, 4);
call    0 returned 100%
        1:  372:    k = 2 + k;
call    0 returned 100%
        1:  373:    cout << k << '\n';
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  374:
        1:  375:    return 0;
call    0 returned 100%
        -:  376:}
