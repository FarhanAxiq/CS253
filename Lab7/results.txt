exp1 - delete[] not called
$ valgrind ./a.out
==4581== Memcheck, a memory error detector
==4581== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==4581== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==4581== Command: ./a.out
==4581==
==4581== 
==4581== HEAP SUMMARY:
==4581==     in use at exit: 100 bytes in 1 blocks
==4581==   total heap usage: 2 allocs, 1 frees, 72,804 bytes allocated
==4581==
==4581== LEAK SUMMARY:
==4581==    definitely lost: 100 bytes in 1 blocks
==4581==    indirectly lost: 0 bytes in 0 blocks
==4581==      possibly lost: 0 bytes in 0 blocks
==4581==    still reachable: 0 bytes in 0 blocks
==4581==         suppressed: 0 bytes in 0 blocks
==4581== Rerun with --leak-check=full to see details of leaked memory
==4581==
==4581== For lists of detected and suppressed errors, rerun with: -s
==4581== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
$ valgrind -q --leak-check=full ./a.out
==4582== 100 bytes in 1 blocks are definitely lost in loss record 1 of 1
==4582==    at 0x483C583: operator new[](unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==4582==    by 0x1091BE: main (in /mnt/d/OneDrive - yes.my/CSU's STUFF/CS253/Lab7/a.out)
==4582==
$ valgrind -q --leak-check=full ./a.out
==4588== 100 bytes in 1 blocks are definitely lost in loss record 1 of 1
==4588==    at 0x483C583: operator new[](unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==4588==    by 0x1091BE: main (exp1.cc:5)
==4588==

exp2 - no delete[] and allocating at the end, leaving the content at index 1-9 empty.
$ g++ -Wall exp2.cc -g a.out
$ valgrind -q --leak-check=full ./a.out
==4602== Invalid write of size 1
==4602==    at 0x1091AB: main (exp2.cc:6)
==4602==  Address 0x4dacc8a is 0 bytes after a block of size 10 alloc'd
==4602==    at 0x483C583: operator new[](unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==4602==    by 0x10919E: main (exp2.cc:5)
==4602==
==4602== 10 bytes in 1 blocks are definitely lost in loss record 1 of 1
==4602==    at 0x483C583: operator new[](unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==4602==    by 0x10919E: main (exp2.cc:5)
==4602==

exp3 - int x is unintialised
$ g++ -Wall exp3.cc -g a.out
$ valgrind -q --leak-check=full ./a.out
==4714== Conditional jump or move depends on uninitialised value(s)
==4714==    at 0x1091D5: main (exp3.cc:11)
==4714==
x is zero

exp4 - int y is unintialised
$ g++ -Wall exp4.cc -g a.out
$ valgrind -q --leak-check=full ./a.out
==4726== Conditional jump or move depends on uninitialised value(s)
==4726==    at 0x1091BC: foo(int) (exp4.cc:6)
==4726==    by 0x109205: main (exp4.cc:15)
==4726==

exp5 - trying to access out of range array
$ g++ -Wall exp5.cc -g a.out
$ ./exp5.cc
Segmentation fault
$ valgrind -q --leak-check=full ./exp5.o
==45== Invalid write of size 1
==45==    at 0x109203: main (exp1.cc:12)
==45==  Address 0x1fffbc62cc is not stack'd, malloc'd or (recently) free'd
==45== 
==45== 
==45== Process terminating with default action of signal 11 (SIGSEGV)
==45==  Access not within mapped region at address 0x1FFFBC62CC      
==45==    at 0x109203: main (exp5.cc:12)
==45==  If you believe this happened as a result of a stack
==45==  overflow in your program's main thread (unlikely but
==45==  possible), you can try to increase the size of the
==45==  main thread stack using the --main-stacksize= flag.
==45==  The main thread stack size used in this run was 8388608.
Segmentation fault

exp6.cc - we delete before using it.
$ g++ -Wall -g  exp1.cc -o exp6.o
$ ./exp6.o
 Sir/Madam 
$ valgrind -q --leak-check=full ./exp6.o
==59== Invalid read of size 1
==59==    at 0x483EF46: strlen (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==59==    by 0x498CD4D: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)
==59==    by 0x109216: main (exp6.cc:9)
==59==  Address 0x4dacc80 is 0 bytes inside a block of size 1,024 free'd
==59==    at 0x483D74F: operator delete[](void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==59==    by 0x109203: main (exp6.cc:8)
==59==  Block was alloc'd at
==59==    at 0x483C583: operator new[](unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==59==    by 0x1091DE: main (exp6.cc:6)
==59==
==59== Invalid read of size 1
==59==    at 0x483EF54: strlen (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==59==    by 0x498CD4D: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)
==59==    by 0x109216: main (exp6.cc:9)
==59==  Address 0x4dacc81 is 1 bytes inside a block of size 1,024 free'd
==59==    at 0x483D74F: operator delete[](void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)  
==59==    by 0x109203: main (exp6.cc:8)
==59==  Block was alloc'd at
==59==    at 0x483C583: operator new[](unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==59==    by 0x1091DE: main (exp1.cc:6)
==59==
==59== Invalid read of size 1
==59==    at 0x4ACF19E: _IO_default_xsputn (genops.c:399)
==59==    by 0x4ACF19E: _IO_default_xsputn (genops.c:370)
==59==    by 0x4ACC879: _IO_new_file_xsputn (fileops.c:1265)
==59==    by 0x4ACC879: _IO_file_xsputn@@GLIBC_2.2.5 (fileops.c:1197)
==59==    by 0x4AC0540: fwrite (iofwrite.c:39)
==59==    by 0x498C9B3: std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)
==59==    by 0x498CD5B: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)
==59==    by 0x109216: main (exp6.cc:9)
==59==  Address 0x4dacc80 is 0 bytes inside a block of size 1,024 free'd
==59==    at 0x483D74F: operator delete[](void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)  
==59==    by 0x109203: main (exp6.cc:8)
==59==  Block was alloc'd at
==59==    at 0x483C583: operator new[](unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==59==    by 0x1091DE: main (exp16cc:6)
==59==
Dear Sir/Madam

exp7.cc - wrong delete, should use delete[] p;
$ g++ -Wall -g  exp7.cc -o exp7.o
$ ./exp1.o
$ valgrind -q --leak-check=full ./exp1.o
==72== Mismatched free() / delete / delete []
==72==    at 0x483D1CF: operator delete(void*, unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==72==    by 0x1091D8: main (exp7.cc:7)
==72==  Address 0x4dacc80 is 0 bytes inside a block of size 8,000 alloc'd
==72==    at 0x483C583: operator new[](unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==72==    by 0x1091BE: main (exp7.cc:6)
==72==

exp8 - using C keyword free instead of delete when using new, which is a C++ keyword
$ valgrind -q --leak-check=full ./exp1.o
==79== Mismatched free() / delete / delete []
==79==    at 0x483CA3F: free (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==79==    by 0x1091CE: main (exp8.cc:8)
==79==  Address 0x4dacc80 is 0 bytes inside a block of size 8,000 alloc'd
==79==    at 0x483C583: operator new[](unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==79==    by 0x1091BE: main (exp8.cc:7)
==79==

exp9 - we delete the entire array, now we have dangling pointer
$ g++ -Wall -g  exp9.cc -o exp9.o
$ ./exp1.o
free(): invalid pointer
Aborted
$ valgrind -q --leak-check=full ./exp9.o
==86== Invalid free() / delete / delete[] / realloc()
==86==    at 0x483D74F: operator delete[](void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)  
==86==    by 0x1091DA: main (exp9.cc:9)
==86==  Address 0x4daccb0 is 48 bytes inside a block of size 160 alloc'd
==86==    at 0x483C583: operator new[](unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==86==    by 0x1091BE: main (exp9.cc:7)
==86==
==86== 160 bytes in 1 blocks are definitely lost in loss record 1 of 1
==86==    at 0x483C583: operator new[](unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==86==    by 0x1091BE: main (exp9.cc:7)
==86==

exp10 - overflow because of unsigned, instead of going to a negative value, it rolled over to max
$ g++ -Wall -g  exp10.cc -o exp10.o
$ ./exp10.o
diff is 4294967286
$ valgrind -q --leak-check=full ./exp10.o
diff is 4294967286